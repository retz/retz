buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.+'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

def gitVersion() {
    def versionText = [
        "sh",  "-c",
        "cd ${project.rootDir} ; git describe --always --tag"].execute().in.text.trim()
    versionText
}

apply plugin: 'nebula-aggregate-javadocs'

subprojects {
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: "com.github.hierynomus.license"

    group = 'io.github.retz'
    // Note: You can't create RPM with hyphen included in version name
    version = '0.0.13-SNAPSHOT'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.21'

        // Declare the dependency for your favourite test framework you want to use in your tests.
        // TestNG is also supported by the Gradle Test task. Just change the
        // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
        // 'test.useTestNG()' to your build script.
        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
    }

    jar {
        def versionText = gitVersion()
        manifest {
            attributes 'Git-Version': versionText
            attributes 'Artifact-Id': "${project.name}-${project.version}"
        }
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from project.sourceSets.main.allJava
    }
    artifacts {
        archives project.tasks.sourcesJar
    }

    license {
        header rootProject.file('LICENSE-HEADER.template')
        strictCheck true
        ext.year = '2016'
        ext.name = 'Nautilus Technologies, Inc.'
        exclude "**/*.json"
    }
}

project(':retz-common') {
    dependencies {
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.+'
        compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.+'
        compile 'org.apache.mesos:mesos:1.0.0'
    }
}

project(':retz-executor') {
    apply plugin: 'application'
    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        compile project(":retz-common")
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        compile 'org.apache.mesos:mesos:1.0.0'
        compile 'commons-io:commons-io:2.5'
        compile 'org.apache.commons:commons-compress:1.12'
        compile 'org.xerial:jnuma:0.1.3'

        testCompile 'com.sparkjava:spark-core:2.5'
    }

    mainClassName = 'io.github.retz.executor.MesosExecutorLauncher'
}

def makePropertyFile(jarFileName, basedir, testType) {
    // A kludge workaround for clean build which don't have build/resources/main
    // where property file creation fails
    def subdir = new File(basedir, "/resources/${testType}")
    subdir.mkdirs();

    // Bundle correctly corresponding file name; See RetzScheduler.setJarUri
    def prop = new Properties()
    def propFile = new File("${basedir}/resources/${testType}/ExecutorJarFile.properties")
    prop.setProperty("filename", jarFileName)
    propFile.createNewFile()
    prop.store(propFile.newWriter(), null)
}

project(':retz-server') {
    apply plugin: 'application'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: 'nebula.ospackage'
    apply plugin: 'nebula.ospackage-application-daemon'

    dependencies {
        compile project(":retz-common")

        compile 'org.slf4j:slf4j-api:1.7.21'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        compile 'commons-io:commons-io:2.5'
        compile 'org.apache.commons:commons-lang3:3.0'
        compile 'commons-cli:commons-cli:1.3.1'

        compile 'org.apache.mesos:mesos:1.0.0'

        compile 'com.sparkjava:spark-core:2.3'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'

        testCompile project(":retz-client")
    }

    task copyExecutorJar(type: Copy, dependsOn: ':retz-executor:shadowJar') {
        from project(":retz-executor").shadowJar.archivePath
        into "${buildDir}/public"
    }
    task copyExecutorJar2(type: Copy, dependsOn: ':retz-executor:shadowJar') {
        from project(":retz-executor").shadowJar.archivePath
        into "${buildDir}/resources/main/public"
    }

    jar {
        dependsOn 'copyExecutorJar'
        // maybe cleaner than custom properties file? hmm, indifferent
        // jar.manifest {
        //     attributes 'ExecutorJarFile': project(":retz-executor").shadowJar.archiveName
        // }
        doLast {
            exec {
                executable "jar"
                args "-uf", jar.archivePath, "-C", "$buildDir", "public"
            }
        }
    }

    def executorJarFile = project(":retz-executor").shadowJar.archiveName

    task processResources.doLast {
        makePropertyFile(executorJarFile, "${buildDir}", "main")
    }

    task processTestResources.doLast {
        makePropertyFile(executorJarFile, "${buildDir}", "test")
    }

    run {
        dependsOn 'copyExecutorJar2' // TODO: eliminate this kludge
        if (project.hasProperty('args')) {
            args project.args.split('\\s+')
        }
    }

    mainClassName = 'io.github.retz.scheduler.MesosFrameworkLauncher'

    shadowJar {
        dependsOn 'copyExecutorJar'
        doLast {
            exec {
                executable "jar"
                args "-uf", shadowJar.archivePath, "-C", "${buildDir}", "public"
            }
        }
    }

    ospackage {
        os = LINUX
        group = "nogroup"
    }
    buildRpm {
        user = "retz"
        release = '1.el7'
        arch = 'X86_64'

        preInstall 'adduser --system retz'
        postInstall 'chown -R retz:nobody /opt/retz-server'
        postUninstall 'userdel retz'
    }
    buildDeb {
        user = "retz"
        arch = 'AMD64'

        preInstall 'adduser --system --disabled-login retz'
        postInstall 'chown -R retz:nogroup /opt/retz-server'
        postUninstall 'deluser --system retz'
    }
}

project(':retz-client') {
    apply plugin: 'application'
    apply plugin: 'nebula.ospackage-application'
    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        compile project(":retz-common")
        compile 'org.slf4j:slf4j-api:1.7.21'
        compile "com.beust:jcommander:1.48"

        //compile 'commons-cli:commons-cli:1.3.1'
        compile 'commons-io:commons-io:2.5'
        compile 'org.eclipse.jetty.websocket:websocket-client:9.3.2.v20150730'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    }

    run {
        if (project.hasProperty('args')) {
            args project.args.split('\\s+')
        }
    }

    mainClassName = 'io.github.retz.cli.Launcher'

    ospackage {
        os = LINUX
        user = 'root' // https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/13
    }
    buildRpm {
        release = '1.el7'
        arch = 'X86_64'
    }
    buildDeb {
        arch = 'AMD64'
    }
}

project('retz-inttest') {
    dependencies {
        testCompile project(":retz-client")
        testCompile 'com.github.docker-java:docker-java:3.0.0'
    }

    task copyServerJar(type: Copy, dependsOn: ':retz-server:shadowJar') {
        from project(":retz-server").shadowJar.archivePath
        into "${buildDir}/libs/"
        rename(/(retz-server)-.+-(all)/, '$1-$2')
    }
    task copyClientJar(type: Copy, dependsOn: ':retz-client:shadowJar') {
        from project(":retz-client").shadowJar.archivePath
        into "${buildDir}/libs/"
        rename(/(retz-client)-.+-(all)/, '$1-$2')
    }

    task copy(dependsOn: ['copyServerJar', 'copyClientJar'])

    task buildDocker {
        doLast {
            exec {
                executable "docker"
                args "build", "-t", "mesos-retz", "${projectDir}/src/test/resources/docker"
            }
        }
    }

    test.dependsOn([buildDocker, copy])
    task inttest(dependsOn: [test])

    // For normal "test" target, all test cases in retz-inttest
    // are skipped. On the other hand, if inttest(2) is triggered,
    // they are executed as JUnit test cases as usual.
    gradle.taskGraph.whenReady { taskGraph ->
        if(taskGraph.hasTask(inttest)) {
            test.excludes = []
        } else {
            test.excludes = ["**/*"]
        }
    }

    // Initial attempt for integration test by shell script.
    // This can be removed if JUnit based inttest work well.
    task inttestByScript {
        dependsOn copy
        doLast {
            exec {
                executable "bash"
                args "${projectDir}/src/test/scripts/simple-test.sh"
            }
        }
    }

    task cleanDockerIamges {
        doLast {
            exec {
                executable "sh"
                args "-c", "docker images -q -f dangling=true | xargs docker rmi"
            }
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
    distributionUrl = distributionUrl.replace("bin", "all")
}
