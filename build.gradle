buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.+'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

def gitVersion() {
    def versionText = [
            "sh", "-c",
            "cd ${project.rootDir} ; git describe --always --tag"].execute().in.text.trim()
    versionText
}

apply plugin: 'nebula-aggregate-javadocs'

subprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'findbugs'
    apply plugin: "com.github.hierynomus.license"

    group = 'io.github.retz'
    // Note: You can't create RPM with hyphen included in version name
    version = '0.0.30-SNAPSHOT'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.21'

        testCompile 'junit:junit:4.12'
        testCompile 'org.hamcrest:hamcrest-library:1.3'

        testCompile 'org.scalacheck:scalacheck_2.11:1.13.+'
        testCompile 'org.scalatest:scalatest_2.11:3.0.+'
        testCompile 'org.scala-lang:scala-library:2.11.+'
    }

    jar {
        def versionText = gitVersion()
        manifest {
            attributes 'Git-Version': versionText
            attributes 'Artifact-Id': "${project.name}-${project.version}"
        }
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from project.sourceSets.main.allJava
    }
    artifacts {
        archives project.tasks.sourcesJar
    }

    license {
        header rootProject.file('LICENSE-HEADER.template')
        strictCheck true
        ext.year = '2016'
        ext.name = 'Nautilus Technologies, Inc.'

        excludes(["**/*.json", "**/*.jks"])
    }
}

project(':retz-common') {
    dependencies {
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.+'
        compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.+'
        compile 'org.apache.mesos:mesos:1.0.1'
    }
}

def makePropertyFile(basedir, testType, name, version) {
    // A kludge workaround for clean build which don't have build/resources/main
    // where property file creation fails
    def subdir = new File(basedir, "/resources/${testType}")
    subdir.mkdirs();

    def serverName = "${name}-${version} (${gitVersion()})"

    // Bundle correctly corresponding file name; See RetzScheduler.setJarUri
    def prop = new Properties()
    def propFile = new File("${basedir}/resources/${testType}/retz-server.properties")
    prop.setProperty("servername", serverName)
    propFile.createNewFile()
    prop.store(propFile.newWriter(), null)
}

def makeClientPropertyFile(basedir, testType, name, version) {
    // A kludge workaround for clean build which don't have build/resources/main
    // where property file creation fails
    def subdir = new File(basedir, "/resources/${testType}")
    subdir.mkdirs();

    def fullVersion = "${name}-${version} (${gitVersion()})"

    def prop = new Properties()
    def propFile = new File("${basedir}/resources/${testType}/retz-client.properties")
    prop.setProperty("version", fullVersion)
    propFile.createNewFile()
    prop.store(propFile.newWriter(), null)
}


project(':retz-server') {
    apply plugin: 'application'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: 'nebula.ospackage'
    apply plugin: 'nebula.ospackage-application-daemon'

    dependencies {
        compile project(":retz-common")

        compile 'org.slf4j:slf4j-api:1.7.21'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        compile 'commons-cli:commons-cli:1.3.1'
        compile 'commons-io:commons-io:2.5'

        compile group: 'com.j256.simplejmx', name: 'simplejmx', version: '1.12'

        compile 'org.apache.mesos:mesos:1.0.1'

        compile 'com.sparkjava:spark-core:2.3'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.4'

        compile 'com.h2database:h2:1.4.+'
        compile group: 'org.postgresql', name: 'postgresql', version: '9.4.+'
        compile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: '8.5.+'

        testCompile project(":retz-client")

        // For local executor
        compile 'org.apache.commons:commons-compress:1.12'
    }

    test {
        useJUnit()
        testLogging { // Show that tests are run in the command-line output
            events 'started', 'passed'
        }
    }

    task processResources.doLast {
        makePropertyFile("${buildDir}", "main", project.name, project.version)
    }

    task processTestResources.doLast {
        makePropertyFile("${buildDir}", "test", project.name, project.version)
    }

    run {
        if (project.hasProperty('args')) {
            args project.args.split('\\s+')
        }
    }

    mainClassName = 'io.github.retz.scheduler.Launcher'

    findbugs.excludeFilter = file("config/findbugs/excludeFilter.xml")

    ospackage {
        os = LINUX
        group = "nogroup"
    }
    buildRpm {
        user = "retz"
        release = '1.el7'
        arch = 'X86_64'

        preInstall 'adduser --system retz'
        postInstall 'chown -R retz:nobody /opt/retz-server'
        postUninstall 'userdel retz'
    }
    buildDeb {
        user = "retz"
        arch = 'AMD64'

        preInstall 'adduser --system --disabled-login retz'
        postInstall 'chown -R retz:nogroup /opt/retz-server'
        postUninstall 'deluser --system retz'
    }
}

project(':retz-client') {
    apply plugin: 'application'
    apply plugin: 'nebula.ospackage-application'
    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        compile project(":retz-common")
        compile 'org.slf4j:slf4j-api:1.7.21'
        compile 'org.slf4j:slf4j-simple:1.7.21'

        compile "com.beust:jcommander:1.48"
        compile 'commons-io:commons-io:2.5'
    }


    task processResources.doLast {
        makeClientPropertyFile("${buildDir}", "main", project.name, project.version)
    }

    task processTestResources.doLast {
        makeClientPropertyFile("${buildDir}", "test", project.name, project.version)
    }

    run {
        if (project.hasProperty('args')) {
            args project.args.split('\\s+')
        }
    }

    mainClassName = 'io.github.retz.cli.Launcher'

    ospackage {
        os = LINUX
        user = 'root' // https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/13
    }
    buildRpm {
        release = '1.el7'
        arch = 'X86_64'
    }
    buildDeb {
        arch = 'AMD64'
    }
}

project('retz-admin') {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'nebula.ospackage-application'
    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        compile project(":retz-common")

        testCompile group: 'junit', name: 'junit', version: '4.11'

        compile 'org.slf4j:slf4j-api:1.7.21'
        compile 'org.slf4j:slf4j-simple:1.7.21'
        compile group: 'com.j256.simplejmx', name: 'simplejmx', version: '1.13'
        compile "com.beust:jcommander:1.48"
    }

    mainClassName = 'io.github.retz.admin.Launcher'

    ospackage {
        os = LINUX
        user = 'root' // https://github.com/nebula-plugins/gradle-ospackage-plugin/issues/13
    }
    buildRpm {
        release = '1.el7'
        arch = 'X86_64'
    }
    buildDeb {
        arch = 'AMD64'
    }
}
project('retz-inttest') {
    dependencies {
        testCompile project(":retz-client")
        testCompile 'com.github.docker-java:docker-java:3.0.0'
    }

    task copyServerJar(type: Copy, dependsOn: ':retz-server:shadowJar') {
        from project(":retz-server").shadowJar.archivePath
        into "${buildDir}/libs/"
        rename(/(retz-server)-.+-(all)/, '$1-$2')
    }
    task copyClientJar(type: Copy, dependsOn: ':retz-client:shadowJar') {
        from project(":retz-client").shadowJar.archivePath
        into "${buildDir}/libs/"
        rename(/(retz-client)-.+-(all)/, '$1-$2')
    }
    task copyAdminJar(type: Copy, dependsOn: ':retz-admin:shadowJar') {
        from project(":retz-admin").shadowJar.archivePath
        into "${buildDir}/libs/"
        rename(/(retz-admin)-.+-(all)/, '$1-$2')
    }
    task copy(dependsOn: ['copyServerJar', 'copyClientJar', 'copyAdminJar'])

    // Retz- clients classes brought to build/classes, while bundled resources are not
    task processTestResources.doLast {
        makeClientPropertyFile("${buildDir}", "test", project.name, project.version)
    }

    task buildDocker {
        doLast {
            exec {
                executable "docker"
                args "build", "-t", "mesos-retz", "${projectDir}/src/test/resources/docker"
            }
        }
    }

    test {
        // Execute test suites only if "inttest" property is explicitly passed,
        // like "gradlew test -Dinttest"
        ext.integration = System.getProperty('inttest', 'false') != 'false'
        inputs.property 'integration', integration
        if (integration) {
            dependsOn buildDocker, copy
        }
        onlyIf { integration }
    }

    task cleanDockerIamges {
        doLast {
            exec {
                executable "sh"
                args "-c", "docker images -q -f dangling=true | xargs docker rmi"
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
    distributionUrl = distributionUrl.replace("bin", "all")
}
